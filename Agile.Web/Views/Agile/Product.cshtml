@using Agile.Entities
@using Agile.Web
@using (var pc = Html.TypeContext<ProductEntity>())
{
    @Html.ValueLine(pc, p => p.ProductName)
    @Html.EntityCombo(pc, p => p.Category, ec =>
    {
        ec.AttachFunction = AgileClient.ProductModule["attachCategory"](ec);
        ec.Create = Navigator.IsCreable(typeof(CategoryEntity), isSearch: true);
        ec.Remove = true;
    })
    @Html.ValueLine(pc, p => p.ReorderLevel)

    @Html.ValueLine(pc, p => p.QuantityPerUnit)
    @Html.EntityLine(pc, p => p.Supplier)
    @Html.ValueLine(pc, p => p.Discontinued)

    using (var sc = pc.SubContext())
    {
        sc.LabelColumns = new BsColumn(4);
    <div class="row">
        <div class="col-sm-offset-3 col-sm-6">
            @Html.ValueLine(sc, p => p.UnitPrice, vl => vl.ValueHtmlProps["onblur"] = AgileClient.ProductModule["updateStockValue"](sc.Prefix).ToString())
        </div>
    </div>
    
    <div class="row">
        <div class="col-sm-offset-3 col-sm-6">
            @Html.ValueLine(sc, p => p.UnitsInStock, vl => { vl.UnitText = "Ã—"; vl.ValueHtmlProps["onblur"] = AgileClient.ProductModule["updateStockValue"](sc.Prefix).ToString(); })
        </div>
    </div>
    
    <div class="row">
        <div class="col-sm-offset-3 col-sm-6">
            @Html.ValueLine(sc, p => p.ValueInStock)
        </div>
    </div>
    }
}


