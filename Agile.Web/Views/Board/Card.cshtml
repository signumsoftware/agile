@using Agile.Logic
@using Agile.Web.Board
@using Agile.Entities
@model CardInfo

<div class="card @(Model.Notifications.Any(n=> n == NotificationType.Moved || n == NotificationType.Created || n == NotificationType.Unarchived) ? "notification" : null)" 
     data-card="@Model.Lite.Key()" draggable="true">
    @if (Model.FirstImage != null)
    {
        <div class="card-image">
            <img src="@Url.Content(Model.FirstImage.FullWebPath)" />
        </div>
    }

    @if (Model.Members.Any())
    {
        <ul class="card-members">
            @foreach (var u in Model.Members)
            {
                <li class="card-member" data-tag="@u.Key()" style="background-color:@Agile.Web.AgileClient.HexColor(u)" title="@u">@Agile.Web.AgileClient.Initials(u)</li>
            }
        </ul>
    }

    @if (Model.Tags.Any())
    {
        <ul class="card-tags">
            @foreach (var t in Model.Tags)
            {
                <li class="card-tag" data-tag="@t.ToLite().Key()" style="background-color:@t.Color.ToColor().ToHtml()" title="@t.Name"></li>
            }
        </ul>
    }


    <span>@Model.Title</span>@if (Model.HasSubscription)
    {
        <span class="glyphicon glyphicon-eye-open card-icons pull-right" title="@typeof(Agile.Entities.SubscriptionEntity).NiceName()"></span>
    }
    @if (Model.HasDescription || Model.Comments > 0 || Model.Attachments > 0 || Model.DueDate.HasValue)
    {
        <ul class="card-icons">
            @if (Model.HasDescription)
            {
                <li title="@Html.PropertyNiceName((CardEntity c)=>c.Description)" class="@(Model.Notifications.Contains(NotificationType.Modified) ? "notification" : null)">
                    <span class="glyphicon glyphicon glyphicon-align-justify"></span>
                </li>
            }
            @if (Model.Comments > 0)
            {
                <li title="@typeof(CommentEntity).NicePluralName()" class="@(Model.Notifications.Contains(NotificationType.Commented) ? "notification" : null)">
                    <span class="glyphicon glyphicon-comment" gray></span><span>&nbsp;@Model.Comments</span>
                </li>
            }

            @if (Model.Attachments > 0)
            {
                <li title="@typeof(AttachmentEntity).NicePluralName()" class="@(Model.Notifications.Contains(NotificationType.Attached)? "notification" : null)">
                    <span class="glyphicon glyphicon-paperclip"></span><span>&nbsp;@Model.Attachments</span>
                </li>
            }

            @if (Model.DueDate.HasValue)
            {
                var dateClass = Model.DueDate.Value <= TimeZoneManager.Now.Date ? "label label-danger" :
                    Model.DueDate.Value <= TimeZoneManager.Now.Date.AddDays(3) ? "label label-warning" : null;

                <li title="@Model.DueDate.Value.ToString("d")" class="@dateClass @(Model.Notifications.Contains(NotificationType.DueDateModified) ? "notification" : null)">
                    <span class="glyphicon glyphicon-time" gray></span><span>&nbsp;@Model.DueDate.Value.SmartShortDatePattern()</span>
                </li>
            }
        </ul>
    }
</div>