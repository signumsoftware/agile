@using Agile.Entities;
@using Agile.Logic;
@using Signum.Engine.Chart;
@using Signum.Engine;
@using Agile.Web.Card;
@model CardEntity
@{
    List<HistoryInfo>
    history = new List<HistoryInfo> { new CardCreatedInfo { Entity = Model.ToLite(), CreationDate = Model.CreationDate, User = Model.CreatedBy } };
    history.AddRange(Model.Comments().Select(c => c.ToCommentInfo()));
    history.AddRange(Model.Attachments().Select(c => c.ToAttachmentInfo()));
    history.AddRange(Model.CardTransitions().Select(c => c.ToCardTransitionInfo()));
    history.SortDescending(a => a.CreationDate);

    var notifications = Model.MyUnreadNotifications().Where(a => NotificationAttendedIn.CardHistory.Contains(a.Type)).ToList().OrderBy(a => a.CreationDate).ToList();
    if (notifications.Any())
    {
        Model.MyUnreadNotifications().Where(a => NotificationAttendedIn.CardHistory.Contains(a.Type)).UnsafeUpdate().Set(a => a.ReadOn, a => TimeZoneManager.Now).Execute();
    }
}

@if (history.Any())
{
    <div class="history-list">
        @foreach (var hi in history)
        {
            var notif = notifications.Any(n => n.TriggeredBy.Is(hi.User) && n.CreationDate == hi.CreationDate && n.Type == hi.NotificationType);

            <div class="history-item @(notif ? "notification" : null)">
                <div class="history-item-title">
                    <span style="color:@Agile.Web.AgileClient.HexColor(hi.User)" class="history-user">@hi.User</span> <span title="@hi.CreationDate.ToString()">@hi.CreationDate.ToAgoString()</span>
                    @if (hi is CardTransitionInfo)
                    {
                        @hi.ToString()
                        var cti = (CardTransitionInfo)hi;

                        var onlyMove = cti.From.Is(cti.To);

                        if (cti.From == null)
                        {
                            <span class="history-transition warning">@ArchivedState.Archived.NiceToString()</span>
                        }
                        else
                        {
                            <span class="history-transition">@cti.From @(onlyMove ? "(" + cti.FromPositon + ")" : null)</span>
                        }
                        <span>→</span>
                        if (cti.To == null)
                        {
                            <span class="history-transition warning">@ArchivedState.Archived.NiceToString()</span>
                        }
                        else
                        {
                            <span class="history-transition">@cti.To @(onlyMove ? "(" + cti.ToPosition + ")" : null)</span>
                        }
                    }
                    else
                    {
                        <a href="@Navigator.NavigateRoute(hi.Entity)">@hi.ToString()</a>
                    }
                </div>
                @if (hi is CommentInfo)
                {
                    var ci = (CommentInfo)hi;
                    <pre style="font: inherit;">@ci.Text</pre>
                }
                else if (hi is AttachmentInfo)
                {
                    var ai = (AttachmentInfo)hi;
                    if (ai.Type == AttachmentType.Image)
                    {
                        <a href="@Url.Content(ai.File.FullWebPath)">
                            <img src="@Url.Content(ai.File.FullWebPath)" style="width:100%" />
                        </a>
                    }
                    else
                    {
                        <a href="@Url.Content(ai.File.FullWebPath)" download="@ai.File.FileName" />
                    }
                }
            </div>
        }
    </div>
}
